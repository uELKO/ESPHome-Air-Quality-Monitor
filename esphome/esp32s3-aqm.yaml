esphome:
  name: "esp32s3-aqs-1"
  friendly_name: ESP32S3-AQS-1
  min_version: 2024.11.0
  name_add_mac_suffix: false
  on_boot:
    - priority: -100
      then:
        - lambda: |-
            id(sen66).set_temperature_compensation(
              id(temperature_offset_input).state,
              0,  // normalized_offset_slope
              0   // time_constant
            );
    - priority: 800
      then:
          - component.update: my_display

external_components:
  - source:
      type: git
      url: https://github.com/uELKO/esphome_external_components
      ref: rework
    components: sen6x

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino
  

# Enable logging
logger:

# Enable Home Assistant API
api:

# Allow Over-The-Air updates
ota:
- platform: esphome

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "ESP32S3-AQS-1"
    password: "asdhfuiSHZUDK234"

# Sets up Bluetooth LE (Only on ESP32) to allow the user
# to provision wifi credentials to the device.
esp32_improv:
  authorizer: none

# To have a "next url" for improv serial
web_server:

i2c: # example, replace
  sda: GPIO1
  scl: GPIO2
  scan: true
  id: bus_a

font:
  - file: 'fonts/DSEG14Classic-Regular.ttf'
    id: font_7s_Temp
    size: 44

  - file: 'fonts/DSEG14Classic-Regular.ttf'
    id: font_7s_Hyg
    size: 32

  - file: 'fonts/DSEG7Modern-Regular.ttf'
    id: font_7s_unit
    size: 24

  - file: 'fonts/Arial.ttf'
    id: font_Arial_24
    size: 24
  - file: 'fonts/Arial.ttf'
    id: font_Arial_18
    size: 18
    glyphs: >-
      !?"%()+*=,-_.:°µ²³0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnÖÄÜöäüopqrstuvwxyz$@<>/≤ 
  - file: 'fonts/Arial.ttf'
    id: font_Arial_16
    size: 16
  - file: 'fonts/Arial.ttf'
    id: font_Arial_14
    size: 14
    glyphs: >-
      !?"%()+*=,-_.:°µ²³0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnÖÄÜöäüopqrstuvwxyz$@<>/≤

    # https://pictogrammers.github.io/@mdi/font/6.5.95/    Unicodes
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: materialdesign_icons_25
    size: 22
    glyphs: [
      "\U000F050F", # mdi-thermometer
      "\U000F0F55", # mdi-home-thermometer-outline
      "\U000F0F54", # mdi-home-thermometer
      "\U000F058E", # mdi-water-percent
      "\U000F029A", # mdi-gauge
      "\U000F059B", # mdi-weather-sunset
      "\U000F059C", # mdi-weather-sunrise
      "\U000F10C2", # mdi-thermometer-high
      "\U000F10C3", # mdi-thermometer-low
      "\U000F091F", # mdi-wifi-strength-1
      "\U000F0922", # mdi-wifi-strength-2
      "\U000F0925", # mdi-wifi-strength-3
      "\U000F0928", # mdi-wifi-strength-4
      "\U000F092B", # mdi-wifi-strength-alert-outline
      "\U000F1257", # api-off
      "\U000F109B"  # api-on
      ]

spi:
  clk_pin: GPIO8
  mosi_pin: GPIO9

interval:
  - interval: 5s
    then:
      - component.update: my_display

time:
  - platform: homeassistant
    id: homeassistant_time
    timezone: "Europe/Berlin"

sensor:
  - platform: homeassistant
    id: ha_api
    entity_id: sensor.home_assistant_operating_system_version
    internal: true

  - platform: sen6x
    id: sen66
    pm_1_0:
      name: "PM <1 µm"
      id: sen66_pm10
      accuracy_decimals: 1
    pm_2_5:
      name: "PM 1-2.5 µm"
      id: sen66_pm25
      accuracy_decimals: 1
    pm_4_0:
      name: "PM 2.5-4 µm"
      id: sen66_pm40
      accuracy_decimals: 1
    pm_10_0:
      name: "PM 4-10 µm"
      id: sen66_pm100
      accuracy_decimals: 1 
    co2:
      name: "CO₂"
      id: sen66_co2
      accuracy_decimals: 0
    temperature:
      name: "Temperature"
      accuracy_decimals: 1
      id: sen66_temperature_top
    humidity:
      name: "Humidity"
      accuracy_decimals: 0
      id: sen66_humidity
    voc:
      name: "VOC"
      id: sen66_voc
      algorithm_tuning:
        index_offset: 100
        learning_time_offset_hours: 12
        learning_time_gain_hours: 12
        gating_max_duration_minutes: 180
        std_initial: 50
        gain_factor: 230
      filters:
        - sliding_window_moving_average:
            window_size: 9
            send_every: 1
    nox:
      name: "NOX"
      id: sen66_nox
      algorithm_tuning:
        index_offset: 100
        learning_time_offset_hours: 12
        learning_time_gain_hours: 12
        gating_max_duration_minutes: 180
        std_initial: 50
        gain_factor: 230
      filters:
        - sliding_window_moving_average:
            window_size: 9
            send_every: 1
    #temperature_compensation: -> Not working for SEN6x for now
    #  offset: -5.8
    #  normalized_offset_slope: 0
    #  time_constant: 0
    store_baseline: true
    update_interval: 10s

  - platform: template
    name: "Ambient Temperature"
    id: sen66_ambient_temperature
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    update_interval: 10s
    lambda: |-
      return id(sen66_temperature_top).state + id(temperature_offset_input).state;

  - platform: template
    name: "Ambient Humidity"
    id: sen66_ambient_humidity
    unit_of_measurement: "%"
    accuracy_decimals: 0
    update_interval: 10s
    lambda: |-
      return id(sen66_humidity).state + id(humidity_offset_input).state;

  - platform: template
    name: "PM ≤10 µm"
    id: sen66_pm010
    unit_of_measurement: "µg/m³"
    accuracy_decimals: 1
    update_interval: 10s
    lambda: |-
      return id(sen66_pm10).state + id(sen66_pm25).state + id(sen66_pm40).state + id(sen66_pm100).state;
    
  - platform: template  
    name: "TVOC (Mølhave)"
    id: sen66_tvoc
    unit_of_measurement: "mg/m³"
    accuracy_decimals: 2
    update_interval: 10s
    lambda: |-
      if (isnan(id(sen66_voc).state)) {
        return NAN;
      }
      float voc_index = id(sen66_voc).state;
      return ((log(501 - voc_index) - 6.24) * (-996.94)) * 0.001;

  - platform: template
    name: "IAQ Index"
    id: iaq_index
    unit_of_measurement: "IAQ"
    accuracy_decimals: 0
    lambda: |-
      float iaq = 100.0; // Start value for good air quality

      // CO2 contribution (400-1500 ppm is optimal, >2000 ppm is bad)
      float co2 = id(sen66_co2).state;
      if (!isnan(co2)) {
        if (co2 > 1500) {
          iaq += (co2 - 1500) / 5.0; // Higher CO2 increases IAQ (worse air quality)
        }
      }

      // TVOC contribution (0-0.25 mg/m³ is good, >1.0 mg/m³ is bad)
      float tvoc = id(sen66_tvoc).state;
      if (!isnan(tvoc)) {
        if (tvoc > 0.25) {
          iaq += (tvoc - 0.25) * 100.0; // Higher VOC levels increase IAQ (worse air quality)
        }
      }

      // Particulate matter
      float pm10 = id(sen66_pm10).state;
      float pm25 = id(sen66_pm25).state;
      float pm40 = id(sen66_pm40).state;
      float pm100 = id(sen66_pm100).state;
      if (!isnan(pm10)) {
        if (pm10 > 5) {
          iaq += (pm10 - 5) * 2.0; // Higher PM2.5 increases IAQ
        }
      }
      if (!isnan(pm25)) {
        if (pm25 > 10) {
          iaq += (pm25 - 10) * 2.0; // Higher PM2.5 increases IAQ
        }
      }
      if (!isnan(pm40)) {
        if (pm40 > 10) {
          iaq += (pm40 - 10) * 2.0; // Higher PM4.0 increases IAQ
        }
      }
      if (!isnan(pm100)) {
        if (pm100 > 20) {
          iaq += (pm100 - 20) * 2.0; // Higher PM10 increases IAQ
        }
      }

      // Humidity contribution (40-60% is optimal)
      float humidity = id(sen66_humidity).state;
      if (!isnan(humidity)) {
        if (humidity < 30 || humidity > 70) {
          //iaq += 10; // Extreme humidity adds to IAQ (worse air quality)
        }
      }

      // Temperature contribution (20-24°C is optimal)
      float temp = id(sen66_temperature_top).state;
      if (!isnan(temp)) {
        if (temp < 16 || temp > 28) {
          //iaq += 10; // Extreme temperatures add to IAQ (worse air quality)
        }
      }

      // Limit IAQ value to range 100-400
      if (iaq > 400) iaq = 400;
      if (iaq < 100) iaq = 100;

      return iaq;
    filters:
      - sliding_window_moving_average:
          window_size: 5
          send_every: 1

number:
  - platform: template
    name: "Temperature Offset"
    id: temperature_offset_input
    optimistic: true
    min_value: -10.0
    max_value: 10.0
    step: 0.05
    initial_value: -4.5 # Due to housing
    restore_value: true
    mode: box

  - platform: template
    name: "Humidity Offset"
    id: humidity_offset_input
    optimistic: true
    min_value: -20.0
    max_value: 20.0
    step: 1
    initial_value: 12.0 # As the native temp. offset function does not work, only a linear offset is used for now
    restore_value: true
    mode: box

button:
  - platform: template
    name: "Start Fan Autoclean"
    id: button_start_fan_autoclean
    on_press: 
      then:
        - sen6x.start_fan_autoclean: sen66  # Seems not to work

display:
  - platform: waveshare_epaper
    id: my_display
    cs_pin: GPIO4
    dc_pin: GPIO5
    busy_pin: GPIO43
    reset_pin: GPIO6
    model: 2.13in-ttgo-b74
    update_interval: never
    reset_duration: 2ms
    rotation: 90°
    lambda: |-
      if (!isnan(id(ha_api).state)) {
        // HA API is connected → Display main layout

        // Linien zeichnen
        it.line(0, 55, 250, 55);
        it.line(140, 0, 140, 55);
        it.line(225, 0, 225, 55);

        // Info icons (WLAN/Bluetooth etc.)

        if (isnan(id(ha_api).state)) {
          // API is not connected
          it.printf(228, 28, id(materialdesign_icons_25), "\U000F1257");
        } else {
          // API is connected
          it.printf(228, 28, id(materialdesign_icons_25), "\U000F109B");
        }
        
        int x = 228;
        int y = 3;
        if (!WiFi.isConnected()) {
          it.printf(x, y, id(materialdesign_icons_25), "%s", "\U000F092B"); // Alert-Symbol
        } else {
          int rssi = WiFi.RSSI();
          const char* icon;
          if (rssi > -50) {
            icon = "\U000F0928"; // mdi-wifi-strength-4
          } else if (rssi > -60) {
            icon = "\U000F0925"; // mdi-wifi-strength-3
          } else if (rssi > -70) {
            icon = "\U000F0922"; // mdi-wifi-strength-2
          } else {
            icon = "\U000F091F"; // mdi-wifi-strength-1
          }
          it.printf(x, y, id(materialdesign_icons_25), "%s", icon);
        }
        
        // Temperature display
        if (isnan(id(sen66_ambient_temperature).state)) {
          it.print(0, 5, id(font_7s_Temp), "NA");
        } else {
          it.printf(0, 5, id(font_7s_Temp), "%.1f", id(sen66_ambient_temperature).state);
        }
        it.print(110, 0, id(font_Arial_24), "°C");
        
        // Air humidity display
        if (isnan(id(sen66_ambient_humidity).state)) {
          it.print(145, 5, id(font_7s_Hyg), "NA");
        } else {
          it.printf(145, 5, id(font_7s_Hyg), "%d", (int) id(sen66_ambient_humidity).state);
        }
        it.print(200, 0, id(font_Arial_24), "%");

        // Frames for the bar charts
        it.rectangle(5, 108, 70, 12); it.line(28, 108, 28, 119); it.line(51, 108, 51, 119);
        it.rectangle(90, 108, 70, 12); it.line(113, 108, 113, 119); it.line(136, 108, 136, 119);
        it.rectangle(175, 108, 70, 12); it.line(198, 108, 198, 119); it.line(221, 108, 221, 119);

        // Fill bar charts, depending on the sensor values, if available
        uint16_t bar_length = 0;
        if (!isnan(id(sen66_co2).state)) {
          bar_length = 0.02 * id(sen66_co2).state;
          if (bar_length > 65) bar_length = 65;
        }
        it.filled_rectangle(5, 108, bar_length, 12);

        bar_length = 0;
        if (!isnan(id(sen66_pm010).state)) {
          bar_length = 2 * id(sen66_pm010).state;
          if (bar_length > 65) bar_length = 65;
        }
        it.filled_rectangle(90, 108, bar_length, 12);

        bar_length = 0;
        if (!isnan(id(sen66_tvoc).state)) {
          bar_length = 10 * id(sen66_tvoc).state;
          if (bar_length > 65) bar_length = 65;
        }
        it.filled_rectangle(175, 108, bar_length, 12);

        // Units of the measured values
        it.printf(5, 60, id(font_Arial_18), "CO2");
        it.printf(90, 60, id(font_Arial_18), "PM ≤10");
        it.printf(175, 60, id(font_Arial_18), "TVOC");

        // Output of the measured values or “N/A” if no value is available
        if (isnan(id(sen66_co2).state)) {
          it.print(5, 84, id(font_Arial_18), "N/A");
        } else {
          it.printf(5, 84, id(font_Arial_18), "%d", (int) id(sen66_co2).state);
        }

        if (isnan(id(sen66_pm010).state)) {
          it.print(90, 84, id(font_Arial_18), "N/A");
        } else {
          it.printf(90, 84, id(font_Arial_18), "%.1f", id(sen66_pm010).state);
        }

        if (isnan(id(sen66_tvoc).state)) {
          it.print(175, 84, id(font_Arial_18), "N/A");
        } else {
          it.printf(175, 84, id(font_Arial_18), "%.1f", id(sen66_tvoc).state);
        }

        // Einheitstexte
        it.printf(51, 87, id(font_Arial_14), "ppm");
        it.printf(126, 87, id(font_Arial_14), "µg/m³");
        it.printf(211, 87, id(font_Arial_14), "mg/m³");
      } 
      else {
        // Fallback: HA API NOT connected → Text-only with 2 columns

        it.printf(0, 0, id(font_Arial_18), "Error: API disconnected.");

        // Linke Spalte (x = 5)
        int x1 = 0;
        int y = 25;
        int line_height = 18;

        if (!isnan(id(sen66_ambient_temperature).state)) {
          it.printf(x1, y, id(font_Arial_18), "Temp: %.1f °C", id(sen66_ambient_temperature).state);
          y += line_height;
        }
        if (!isnan(id(sen66_ambient_humidity).state)) {
          it.printf(x1, y, id(font_Arial_18), "RH: %.0f %%", id(sen66_ambient_humidity).state);
          y += line_height;
        }
        if (!isnan(id(sen66_co2).state)) {
          it.printf(x1, y, id(font_Arial_18), "CO2: %.0f", id(sen66_co2).state);
          y += line_height;
        }
        if (!isnan(id(sen66_tvoc).state)) {
          it.printf(x1, y, id(font_Arial_18), "TVOC: %.0f mg/m³", id(sen66_tvoc).state);
          y += line_height;
        }
        if (!isnan(id(sen66_nox).state)) {
          it.printf(x1, y, id(font_Arial_18), "NOx: %.0f", id(sen66_nox).state);
          y += line_height;
        }
        

        // Rechte Spalte (x = 130)
        int x2 = 130;
        y = 25;

        if (!isnan(id(sen66_pm10).state)) {
          it.printf(x2, y, id(font_Arial_18), "PMXX in µg/m³:");
          y += line_height;
        }
        if (!isnan(id(sen66_pm10).state)) {
          it.printf(x2, y, id(font_Arial_18), "PM1.0: %.1f", id(sen66_pm10).state);
          y += line_height;
        }
        if (!isnan(id(sen66_pm25).state)) {
          it.printf(x2, y, id(font_Arial_18), "PM2.5: %.1f", id(sen66_pm25).state);
          y += line_height;
        }
        if (!isnan(id(sen66_pm40).state)) {
          it.printf(x2, y, id(font_Arial_18), "PM4.0: %.1f", id(sen66_pm40).state);
          y += line_height;
        }
        if (!isnan(id(sen66_pm100).state)) {
          it.printf(x2, y, id(font_Arial_18), "PM10: %.1f", id(sen66_pm100).state);
          y += line_height;
        }
      }